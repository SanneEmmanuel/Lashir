import os
import io
import tempfile
import librosa
import numpy as np
from flask import Flask, request, send_file, jsonify
import music21
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Chromatic solfege mapping (movable do)
SOLFEGE_MAP = {
    0: 'Do',
    1: 'Di',
    2: 'Re',
    3: 'Ri',
    4: 'Mi',
    5: 'Fa',
    6: 'Fi',
    7: 'Sol',
    8: 'Si',
    9: 'La',
    10: 'Li',
    11: 'Ti'
}

def audio_to_notes(audio_path):
    """Convert audio file to music21 notes with solfege syllables"""
    y, sr = librosa.load(audio_path, sr=None)
    tempo, beat_frames = librosa.beat.beat_track(y=y, sr=sr)
    onset_frames = librosa.onset.onset_detect(y=y, sr=sr)
    onset_times = librosa.frames_to_time(onset_frames, sr=sr)
    
    # Get pitch content
    pitches, magnitudes = librosa.piptrack(y=y, sr=sr)
    pitch_times = librosa.times_like(pitches, sr=sr)
    
    notes = []
    for start_time in onset_times:
        idx = np.argmin(np.abs(pitch_times - start_time))
        pitch_idx = np.argmax(magnitudes[:, idx])
        pitch_hz = pitches[pitch_idx, idx]
        
        if pitch_hz > 0:
            midi_note = librosa.hz_to_midi(pitch_hz)
            pitch = music21.pitch.Pitch(midi=midi_note)
            semitone = int(round(midi_note)) % 12
            solfege = SOLFEGE_MAP.get(semitone, '?')
            
            # Create note with duration and solfege
            note = music21.note.Note(pitch)
            note.duration = music21.duration.Duration(0.5)  # Fixed duration for simplicity
            note.addLyric(solfege)
            notes.append(note)
    
    return notes, tempo

def create_staff_notation(notes, tempo):
    """Create music21 stream with staff notation"""
    stream = music21.stream.Stream()
    stream.append(music21.tempo.MetronomeMark(number=tempo))
    stream.append(music21.meter.TimeSignature('4/4'))
    
    for note in notes:
        stream.append(note)
    
    return stream

def stream_to_word(stream, output_path):
    """Convert music21 stream to Word document with staff notation"""
    # Create temporary MusicXML and PNG
    xml_path = os.path.join(tempfile.gettempdir(), 'temp_notation.xml')
    img_path = os.path.join(tempfile.gettempdir(), 'temp_notation.png')
    
    # Write to MusicXML and convert to image
    stream.write('musicxml', xml_path)
    os.system(f'musescore {xml_path} -o {img_path} > /dev/null 2>&1')
    
    # Create Word document
    doc = Document()
    doc.add_heading('Lashir - Your Ultimate Sound to Solfa Converter', 0)
    doc.add_paragraph('Musical Staff Notation', style='Heading1')
    doc.add_paragraph(f'Generated by Dr. Sanne Karibo\nTempo: {tempo} BPM')
    
    # Add notation image
    if os.path.exists(img_path):
        doc.add_picture(img_path, width=Inches(6))
        last_paragraph = doc.paragraphs[-1]
        last_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Add solfege table
    doc.add_paragraph('Solfa Notation Guide', style='Heading2')
    table = doc.add_table(rows=1, cols=2)
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = 'Note'
    hdr_cells[1].text = 'Solfa Syllable'
    
    for note in set(n.pitch.name for n in notes if hasattr(n, 'pitch')):
        solfege = next((n.lyric for n in notes if n.pitch.name == note), '')
        row_cells = table.add_row().cells
        row_cells[0].text = note
        row_cells[1].text = solfege
    
    doc.add_page_break()
    doc.save(output_path)
    return output_path

@app.route('/upload', methods=['POST'])
def upload():
    """Endpoint for audio file upload"""
    if 'file' not in request.files:
        return jsonify(error="No file part"), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify(error="No selected file"), 400
    
    if file:
        # Save audio file
        audio_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(audio_path)
        
        # Process audio
        notes, tempo = audio_to_notes(audio_path)
        stream = create_staff_notation(notes, tempo)
        
        # Create Word document
        doc_path = os.path.join(app.config['UPLOAD_FOLDER'], 'output.docx')
        stream_to_word(stream, doc_path)
        
        return send_file(
            doc_path,
            as_attachment=True,
            download_name='Lashir_Notation.docx',
            mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        )

@app.route('/stream', methods=['POST'])
def stream():
    """Endpoint for live audio streaming"""
    audio_data = request.data
    if not audio_data:
        return jsonify(error="No audio data received"), 400
    
    # Create temporary audio file
    with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp:
        tmp.write(audio_data)
        audio_path = tmp.name
    
    # Process audio
    notes, tempo = audio_to_notes(audio_path)
    stream = create_staff_notation(notes, tempo)
    
    # Create Word document
    doc_path = os.path.join(tempfile.gettempdir(), 'stream_output.docx')
    stream_to_word(stream, doc_path)
    
    return send_file(
        doc_path,
        as_attachment=True,
        download_name='Lashir_Stream_Notation.docx',
        mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    )

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
